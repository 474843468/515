package com.psi.psieasymanager.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.psi.psieasymanager.data.bean.PxTableInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PX_TABLE_INFO".
*/
public class PxTableInfoDao extends AbstractDao<PxTableInfo, Long> {

    public static final String TABLENAME = "PX_TABLE_INFO";

    /**
     * Properties of entity PxTableInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Num = new Property(3, Integer.class, "num", false, "NUM");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Order_no = new Property(5, String.class, "order_no", false, "ORDER_NO");
        public final static Property Create_by = new Property(6, Integer.class, "create_by", false, "CREATE_BY");
        public final static Property Create_date = new Property(7, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Update_by = new Property(8, Integer.class, "update_by", false, "UPDATE_BY");
        public final static Property Update_date = new Property(9, String.class, "update_date", false, "UPDATE_DATE");
        public final static Property Del_flag = new Property(10, String.class, "del_flag", false, "DEL_FLAG");
        public final static Property Remarks = new Property(11, String.class, "remarks", false, "REMARKS");
        public final static Property Version = new Property(12, Integer.class, "version", false, "VERSION");
        public final static Property Store_id = new Property(13, String.class, "store_id", false, "STORE_ID");
        public final static Property Brand_id = new Property(14, String.class, "brand_id", false, "BRAND_ID");
        public final static Property Area_id = new Property(15, Long.class, "area_id", false, "AREA_ID");
    }

    private Query<PxTableInfo> pxTableArea_PxTableInfoListQuery;

    public PxTableInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PxTableInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PX_TABLE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"NUM\" INTEGER," + // 3: num
                "\"STATUS\" TEXT," + // 4: status
                "\"ORDER_NO\" TEXT," + // 5: order_no
                "\"CREATE_BY\" INTEGER," + // 6: create_by
                "\"CREATE_DATE\" TEXT," + // 7: create_date
                "\"UPDATE_BY\" INTEGER," + // 8: update_by
                "\"UPDATE_DATE\" TEXT," + // 9: update_date
                "\"DEL_FLAG\" TEXT," + // 10: del_flag
                "\"REMARKS\" TEXT," + // 11: remarks
                "\"VERSION\" INTEGER," + // 12: version
                "\"STORE_ID\" TEXT," + // 13: store_id
                "\"BRAND_ID\" TEXT," + // 14: brand_id
                "\"AREA_ID\" INTEGER);"); // 15: area_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PX_TABLE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PxTableInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(4, num);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String order_no = entity.getOrder_no();
        if (order_no != null) {
            stmt.bindString(6, order_no);
        }
 
        Integer create_by = entity.getCreate_by();
        if (create_by != null) {
            stmt.bindLong(7, create_by);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(8, create_date);
        }
 
        Integer update_by = entity.getUpdate_by();
        if (update_by != null) {
            stmt.bindLong(9, update_by);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(10, update_date);
        }
 
        String del_flag = entity.getDel_flag();
        if (del_flag != null) {
            stmt.bindString(11, del_flag);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(12, remarks);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(13, version);
        }
 
        String store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindString(14, store_id);
        }
 
        String brand_id = entity.getBrand_id();
        if (brand_id != null) {
            stmt.bindString(15, brand_id);
        }
 
        Long area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindLong(16, area_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PxTableInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(4, num);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String order_no = entity.getOrder_no();
        if (order_no != null) {
            stmt.bindString(6, order_no);
        }
 
        Integer create_by = entity.getCreate_by();
        if (create_by != null) {
            stmt.bindLong(7, create_by);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(8, create_date);
        }
 
        Integer update_by = entity.getUpdate_by();
        if (update_by != null) {
            stmt.bindLong(9, update_by);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(10, update_date);
        }
 
        String del_flag = entity.getDel_flag();
        if (del_flag != null) {
            stmt.bindString(11, del_flag);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(12, remarks);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(13, version);
        }
 
        String store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindString(14, store_id);
        }
 
        String brand_id = entity.getBrand_id();
        if (brand_id != null) {
            stmt.bindString(15, brand_id);
        }
 
        Long area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindLong(16, area_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PxTableInfo readEntity(Cursor cursor, int offset) {
        PxTableInfo entity = new PxTableInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // order_no
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // create_by
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // create_date
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // update_by
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // update_date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // del_flag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remarks
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // version
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // store_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // brand_id
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15) // area_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PxTableInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrder_no(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreate_by(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCreate_date(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdate_by(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUpdate_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDel_flag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemarks(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVersion(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setStore_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBrand_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setArea_id(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PxTableInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PxTableInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PxTableInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pxTableInfoList" to-many relationship of PxTableArea. */
    public List<PxTableInfo> _queryPxTableArea_PxTableInfoList(Long area_id) {
        synchronized (this) {
            if (pxTableArea_PxTableInfoListQuery == null) {
                QueryBuilder<PxTableInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Area_id.eq(null));
                pxTableArea_PxTableInfoListQuery = queryBuilder.build();
            }
        }
        Query<PxTableInfo> query = pxTableArea_PxTableInfoListQuery.forCurrentThread();
        query.setParameter(0, area_id);
        return query.list();
    }

}
