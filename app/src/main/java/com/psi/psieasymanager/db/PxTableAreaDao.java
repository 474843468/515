package com.psi.psieasymanager.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.psi.psieasymanager.data.bean.PxTableArea;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PX_TABLE_AREA".
*/
public class PxTableAreaDao extends AbstractDao<PxTableArea, Long> {

    public static final String TABLENAME = "PX_TABLE_AREA";

    /**
     * Properties of entity PxTableArea.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Create_by = new Property(2, Integer.class, "create_by", false, "CREATE_BY");
        public final static Property Create_date = new Property(3, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Update_by = new Property(4, Integer.class, "update_by", false, "UPDATE_BY");
        public final static Property Update_date = new Property(5, String.class, "update_date", false, "UPDATE_DATE");
        public final static Property Del_flag = new Property(6, String.class, "del_flag", false, "DEL_FLAG");
        public final static Property Remarks = new Property(7, String.class, "remarks", false, "REMARKS");
        public final static Property Version = new Property(8, Integer.class, "version", false, "VERSION");
        public final static Property Store_id = new Property(9, String.class, "store_id", false, "STORE_ID");
        public final static Property Brand_id = new Property(10, String.class, "brand_id", false, "BRAND_ID");
    }

    private DaoSession daoSession;


    public PxTableAreaDao(DaoConfig config) {
        super(config);
    }
    
    public PxTableAreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PX_TABLE_AREA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CREATE_BY\" INTEGER," + // 2: create_by
                "\"CREATE_DATE\" TEXT," + // 3: create_date
                "\"UPDATE_BY\" INTEGER," + // 4: update_by
                "\"UPDATE_DATE\" TEXT," + // 5: update_date
                "\"DEL_FLAG\" TEXT," + // 6: del_flag
                "\"REMARKS\" TEXT," + // 7: remarks
                "\"VERSION\" INTEGER," + // 8: version
                "\"STORE_ID\" TEXT," + // 9: store_id
                "\"BRAND_ID\" TEXT);"); // 10: brand_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PX_TABLE_AREA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PxTableArea entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer create_by = entity.getCreate_by();
        if (create_by != null) {
            stmt.bindLong(3, create_by);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(4, create_date);
        }
 
        Integer update_by = entity.getUpdate_by();
        if (update_by != null) {
            stmt.bindLong(5, update_by);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(6, update_date);
        }
 
        String del_flag = entity.getDel_flag();
        if (del_flag != null) {
            stmt.bindString(7, del_flag);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(8, remarks);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(9, version);
        }
 
        String store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindString(10, store_id);
        }
 
        String brand_id = entity.getBrand_id();
        if (brand_id != null) {
            stmt.bindString(11, brand_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PxTableArea entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer create_by = entity.getCreate_by();
        if (create_by != null) {
            stmt.bindLong(3, create_by);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(4, create_date);
        }
 
        Integer update_by = entity.getUpdate_by();
        if (update_by != null) {
            stmt.bindLong(5, update_by);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(6, update_date);
        }
 
        String del_flag = entity.getDel_flag();
        if (del_flag != null) {
            stmt.bindString(7, del_flag);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(8, remarks);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(9, version);
        }
 
        String store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindString(10, store_id);
        }
 
        String brand_id = entity.getBrand_id();
        if (brand_id != null) {
            stmt.bindString(11, brand_id);
        }
    }

    @Override
    protected final void attachEntity(PxTableArea entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PxTableArea readEntity(Cursor cursor, int offset) {
        PxTableArea entity = new PxTableArea( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // create_by
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // create_date
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // update_by
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // update_date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // del_flag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remarks
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // version
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // store_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // brand_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PxTableArea entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreate_by(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCreate_date(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdate_by(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUpdate_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDel_flag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemarks(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVersion(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStore_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBrand_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PxTableArea entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PxTableArea entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PxTableArea entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
